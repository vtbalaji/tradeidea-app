rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ============================================
    // HELPER FUNCTIONS
    // ============================================

    // Check if user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Check if user owns the resource
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Check if email is verified (optional - can be enabled later)
    function isEmailVerified() {
      return request.auth.token.email_verified == true;
    }

    // Validate field is not changed during update
    function fieldNotChanged(field) {
      return !(field in request.resource.data) ||
             request.resource.data[field] == resource.data[field];
    }

    // ============================================
    // READ-ONLY COLLECTIONS (Market Data)
    // Only authenticated users can read, nobody can write
    // ============================================

    // Symbols collection - READ ONLY
    match /symbols/{symbolId} {
      allow read: if isSignedIn();
      allow write: if false; // Only backend/admin can write
    }

    // Technicals collection - READ ONLY
    match /technicals/{symbolId} {
      allow read: if isSignedIn();
      allow write: if false;
    }

    // Screener collections - READ ONLY
    match /macrossover50/{crossoverId} {
      allow read: if isSignedIn();
      allow write: if false; // Only backend scripts can write
    }

    match /macrossover200/{crossoverId} {
      allow read: if isSignedIn();
      allow write: if false; // Only backend scripts can write
    }

    match /advancedtrailstop/{crossoverId} {
      allow read: if isSignedIn();
      allow write: if false; // Only backend scripts can write
    }

    match /supertrendcrossover/{crossoverId} {
      allow read: if isSignedIn();
      allow write: if false; // Only backend scripts can write
    }

    match /volumespike/{spikeId} {
      allow read: if isSignedIn();
      allow write: if false; // Only backend scripts can write
    }

    match /darvasboxes/{boxId} {
      allow read: if isSignedIn();
      allow write: if false; // Only backend scripts can write
    }

    match /bbsqueeze/{squeezeId} {
      allow read: if isSignedIn();
      allow write: if false; // Only backend scripts can write
    }

    // ============================================
    // USER-SPECIFIC COLLECTIONS
    // Users can only access their own data
    // ============================================

    // Users collection - users can only read/write their own profile
    match /users/{userId} {
      allow read: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if false; // Never allow delete
    }

    // Accounts collection - users can only access their own accounts
    match /accounts/{accountId} {
      allow read: if isSignedIn() &&
                     resource.data.userId == request.auth.uid;

      allow create: if isSignedIn() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['userId', 'name', 'createdAt']);

      allow update: if isSignedIn() &&
                       resource.data.userId == request.auth.uid &&
                       fieldNotChanged('userId') && // Cannot change owner
                       fieldNotChanged('createdAt'); // Cannot change creation date

      allow delete: if isSignedIn() &&
                       resource.data.userId == request.auth.uid &&
                       resource.data.get('isDefault', false) != true; // Cannot delete default account
    }

    // Portfolios collection - users can only access their own positions
    match /portfolios/{positionId} {
      allow read: if isSignedIn() &&
                     resource.data.userId == request.auth.uid;

      allow create: if isSignedIn() &&
                       request.resource.data.userId == request.auth.uid;

      allow update: if isSignedIn() &&
                       resource.data.userId == request.auth.uid &&
                       fieldNotChanged('userId') &&
                       fieldNotChanged('createdAt');

      allow delete: if isSignedIn() &&
                       resource.data.userId == request.auth.uid;
    }

    // Notifications collection - users can only access their own notifications
    match /notifications/{notificationId} {
      allow read: if isSignedIn() &&
                     resource.data.userId == request.auth.uid;

      allow create: if isSignedIn(); // Anyone can create (for system notifications)

      allow update: if isSignedIn() &&
                       resource.data.userId == request.auth.uid &&
                       fieldNotChanged('userId') &&
                       fieldNotChanged('createdAt');

      allow delete: if false; // Never allow delete
    }

    // ============================================
    // SOCIAL/SHARED COLLECTIONS
    // Users can read all, but only modify their own
    // ============================================

    // TradingIdeas collection - public read, owner write
    match /tradingIdeas/{ideaId} {
      allow read: if isSignedIn();

      allow create: if isSignedIn() &&
                       request.resource.data.userId == request.auth.uid;

      allow update: if isSignedIn() && (
        // Owner can update everything except protected fields
        (resource.data.userId == request.auth.uid &&
         fieldNotChanged('userId') &&
         fieldNotChanged('createdAt')) ||
        // Others can only like/follow (update specific fields)
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['followers', 'likedBy', 'likes', 'commentCount'])
      );

      allow delete: if false; // No delete allowed
    }

    // Comments collection - public read, owner write
    match /comments/{commentId} {
      allow read: if isSignedIn();

      allow create: if isSignedIn() &&
                       request.resource.data.userId == request.auth.uid;

      allow update: if isSignedIn() &&
                       resource.data.userId == request.auth.uid &&
                       fieldNotChanged('userId') &&
                       fieldNotChanged('ideaId') &&
                       fieldNotChanged('createdAt');

      allow delete: if false; // No delete allowed
    }

    // Ideas collection (legacy - if still used)
    match /ideas/{ideaId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() &&
        resource.data.userId == request.auth.uid;
      allow delete: if false; // No delete allowed
    }

    // Portfolio collection (legacy - if still used)
    match /portfolio/{positionId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() &&
        request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() &&
        resource.data.userId == request.auth.uid;
      allow delete: if false; // No delete allowed
    }

    // ============================================
    // FALLBACK RULE
    // Deny all access to any other collections
    // ============================================
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
