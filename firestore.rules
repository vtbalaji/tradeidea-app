rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Symbols collection - READ ONLY for all authenticated users
    match /symbols/{symbolId} {
      allow read: if isSignedIn();
      allow write: if false;
    }

    // Technicals collection - READ ONLY for all authenticated users
    match /technicals/{symbolId} {
      allow read: if isSignedIn();
      allow write: if false;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isOwner(userId);
    }

    // Accounts collection - for managing multiple portfolios
    match /accounts/{accountId} {
      allow read: if isSignedIn() &&
        resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() &&
        request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() &&
        resource.data.userId == request.auth.uid;
      allow delete: if false; // No delete allowed
    }

    // Ideas collection
    match /ideas/{ideaId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() &&
        resource.data.userId == request.auth.uid;
      allow delete: if false; // No delete allowed
    }

    // Portfolio collection
    match /portfolio/{positionId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() &&
        request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() &&
        resource.data.userId == request.auth.uid;
      allow delete: if false; // No delete allowed - use status='closed' instead
    }

    // TradingIdeas collection
    match /tradingIdeas/{ideaId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      // Allow owner to update everything, others can only update followers/likes/likedBy
      allow update: if isSignedIn() && (
        resource.data.userId == request.auth.uid ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followers', 'likedBy', 'likes', 'commentCount'])
      );
      allow delete: if false; // No delete allowed
    }

    // Portfolios collection
    match /portfolios/{positionId} {
      allow read: if isSignedIn() &&
        resource.data.userId == request.auth.uid;
      allow create: if isSignedIn();
      allow update: if isSignedIn() &&
        resource.data.userId == request.auth.uid;
      allow delete: if false; // No delete allowed
    }

    // Comments collection
    match /comments/{commentId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() &&
        resource.data.userId == request.auth.uid;
      allow delete: if false; // No delete allowed
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() &&
        resource.data.userId == request.auth.uid;
      allow delete: if false; // No delete allowed
    }

    // MA Crossover collections - READ ONLY for all authenticated users
    match /macrossover50/{crossoverId} {
      allow read: if isSignedIn();
      allow write: if false; // Only backend scripts can write
    }

    match /macrossover200/{crossoverId} {
      allow read: if isSignedIn();
      allow write: if false; // Only backend scripts can write
    }
  }
}
